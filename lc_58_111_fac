# 58. Length of Last Word 
# Accepted Runtime 28 ms

class Solution :
    def lengthOfLastWord(self, s:str) -> int :
        s_split = s.split()
        if len(s_split)==0 :
            return 0
        else :
            return len(s_split[-1])

        
# 66. Plus One 
# Accepted Runtime 32 ms -> [1,2,3,9,9] 구현 ??

class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        n = digits[-1]
        n2 = digits[-2]
        del digits[-1]
        digits.append(n+1)
        if digits[-1] == 10 :
            digits[-1] = 0
            digits[-2] = n2+1
        return digits
        
# ?        
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        n = len(digits)
        i = n-1
        while i >= 0 :
            if digits[i] != 9 :
                digits[i] = digits[i] + 1
                carry = 0 
                break
            else :
                digits[i] = 0 
                carry = 1
            if i==0 and carry ==1 :
                digits.insert(0,1)
            i -= 1
        return digits
        
 
# 67. Add Binary
# Accepted Runtime 32 ms
# int(a,2) : 2진법 -> 10진법
# return bin(int(a,2)+int(b,2)) : 10진법 -> 2진법

class Solution:
    def addBinary(self, a: str, b: str) -> str:
        return bin(int(a,2) + int(b,2))[2::]  


# 69. Sqrt(x)   
# Accepted Runtime 16 ms

class Solution:
    def mySqrt(self, x: int) -> int:
        x_sqrt = math.sqrt(x)
        if x_sqrt == int :
            return(x_sqrt)
        else :
            return(math.trunc(x_sqrt))


# 70. Climbing Stairs  
# 









---------------------------------------------------


# 83. Remove Duplicates from Sorted List    
# Accepted Runtime 44 ms
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        n = head
        while n and n.next :
            if n.val == n.next.val :
                n.next = n.next.next
            else :
                n = n.next
        return head


# 88. Merge Sorted Array   
# Accepted Runtime ? ms
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
 
        """
        i=0
        j=0
        for i in range(len(nums1)-1,-1,-1):
            while nums1[i]==0 and j<n:
                nums1[i] = nums2[j]
                j +=1
        return nums1.sort()
        
# Accepted Runtime 36 ms
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        
        """
        for i in range(m+n):
            if i==m:
                del nums1[m:]
        for i in nums2:
            nums1.append(i)
            
        return nums1.sort()            


# 100. Same Tree
# Accepted Runtime 28 ms
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        def new(p,q):
            if p is None and q is None : return True
            if p is None and q is not None : return False
            if p is not None and q is None : return False
            if p.val != q.val : return False
            return new(p.left,q.left) and new(p.right, q.right)
        return new(p,q)
    
    
# 101. Symmetric Tree
# Accepted Runtime 28 ms
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if not root : return True
        return self.checkSymmetric(root, root)
    
    def checkSymmetric(self, node1, node2) :
        if not node1 and not node2 : return True
        if not node1 or not node2 : return False
        if node1.val != node2.val : return False
        return self.checkSymmetric(node1.left, node2.right) and self.checkSymmetric(node1.right, node2.left)

# Accepted Runtime 32 ms
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if not root : return True
        return self.checkSymmetric(root.left, root.right)
    
    def checkSymmetric(self, root1, root2):
        if not root1 or not root2 :
            return root1 == root2
        if root1.val != root2.val :
            return False
        return self.checkSymmetric(root1.left, root2.right) and self.checkSymmetric(root1.right, root2.left)


# 104. Maximum Depth of Binary Tree
# Accepted Runtime 44 ms
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        s1 = s2 = 1
        if root == None :
            return 0
        else :
            s1 += self.maxDepth(root.left)
            s2 += self.maxDepth(root.right)
            return max(s1,s2)

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if root == None :
            return 0
        else :
            return max(self.maxDepth(root.left),self.maxDepth(root.right))+1
            
# 108. Convert Sorted Array to Binary Search Tree










# 110. Balanced Binary Tree










# 111. Minimum Depth of Binary Tree
# Accepted Runtime 540 ms
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if root is None:
            return 0
        if root.left is None and root.right is None :
            return 1
        if root.left is None :
            return self.minDepth(root.right) + 1
        if root.right is None:
            return self.minDepth(root.left) + 1
        else:
            return min(self.minDepth(root.left)+1, self.minDepth(root.right)+1)


-----------------------------------------------------------------------------------

# factorial 
# 재귀함수 이용
1.
def factorial(n):
    if n == 1:      # n이 1일 때
        return 1    # 1을 반환하고 재귀호출을 끝냄
    return n * factorial(n - 1)    # n과 factorial 함수에 n - 1을 넣어서 반환된 값을 곱함
 
print(factorial(5))

2.
def factorial(n):
    if n == 1:      # n이 1일 때
        return 1    # 1을 반환하고 재귀호출을 끝냄

3.
return n * factorial(n - 1)    # n과 factorial 함수에 n - 1을 넣어서 반환된 값을 곱함


4.
math 함수 사용 
import math 
math.factorial(5)


5. 
for() 문 사용
-> 첫 값을 1로 두고 n까지 반복하면서 곱해나가는 방식 

def factorial_for(n):
    ret = 1 
    for i in range(1, n+1):
        ret *=i
    return ret 

factorial_for(5)





